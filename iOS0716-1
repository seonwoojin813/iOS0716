import UIKit

//매개변수 없는 함수
func noArg(){
    print("매개변수가 없는 함수")
}

//매개변수가 있는 함수
func oneArg(n:Int){
    print("매개변수:", n)
}

//매개변수가 없는 함수 호출
noArg()
//매개변수가 있는 함수를 호출할 때 매개변수 이름을 기재해서 데이터를 넘겨야 합니다.
oneArg(n:10)

//내부와 외부에서 매개변수 이름을 다르게 설정
//함수를 호출할 때는 integer 내부에서 사용할 때는 n
func aliasArg(integer n : Int){
    print("대입한 값:", n)
}

//함수를 호출할 때는 앞에 있는 이름으로 대입
aliasArg(integer: 100)

/*
//매개변수를 생략하는 함수를 만들 때는 반드시 별명을 사용해야 합니다.
//_ 뒤에 n을 써줘야해
func hiddenArg(_ : Int){
    print("매개변수 생략")
}

hiddenArg(100)
*/

/*
//매개변수를 생략하는 함수를 만들 때는 반드시 별명을 사용해야 합니다.
func hiddenArg(_ n: Int){
    print("매개변수 생략")
}

hiddenArg(100)

func intAdd(n1 : Int, n2 : Int = 0){
    print("더한 결과:", n1+n2)
}
intAdd(n1:100, n2:200)
intAdd(n1:200)

//매개변수의 개수를 가변으로 설정
//내부에서는 list로 사용
func avg(_ n1 : Int...){
    for x in n1{
        print(x)
  }
}
avg(10, 20)
avg(30)
*/

//swift에서는 함수의 매개변수를 넘길 때 let으로 설정
//함수 내부에서 외부 매개변수의 값을 수정할 수 없습니다.
//매개변수의 자료형 앞에 inout을 붙이면 참조가 전달되서 수정이 가능
//함수를 호출할 때는 &변수의 형태로 데이터를 전달
/*
var x : Int = 10
func inc(n : Int){
  n = n + 1
}
 이건 오류 - inout을 안해줘서
*/
/*
var x : Int = 10
func inc(n : inout Int){
    n = n + 1
}
 이건 오류 - 참조를 안해줘서
*/


var x : Int = 10
func inc(n : inout Int){
    n = n + 1
}
//참조를 넘겼기 때문에 함수 내부에서 데이터를 변경할 수 있습니다.
//함수의 매개변수가 &를 붙여서 요청하면 이 함수는 내부에서
//데이터를 변경할려고 하는 것
inc(n : &x)
print(x)
